services:
  # Odyssey для auth-service
  odyssey:
    build:
      context: ./odyssey
      dockerfile: Dockerfile
    command: odyssey /etc/odyssey/odyssey.conf
    volumes:
      - ./odyssey/auth/odyssey.conf:/etc/odyssey/odyssey.conf
    ports:
      - 6432:6432
    networks:
      - nats-m
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "timeout 1 bash -c 'cat < /dev/null > /dev/tcp/localhost/6432' || exit 1"]
      interval: 3s
      timeout: 3s
      retries: 10
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    sysctls:
      - net.ipv4.ip_local_port_range=1024 65535
      - net.ipv4.tcp_tw_reuse=1

  monolith-service:
    build:
      context: ./
      dockerfile: Dockerfile
    stop_signal: SIGINT
    stop_grace_period: 10s
    ports:
      - 13693:13693
      - 9081:9081
      - 9082:9082
    expose:
      - 13693
      - 9081
    volumes:
      - .:/app/monolith-service
    networks:
      - nats-m
    environment:
      LOG_LEVEL: info
      LOG_SERVICE_NAME: monolith-service
      LOG_PATH: /var/log/monolith-service
      DB_DATA_SOURCE: postgres://postgres:1789@odyssey:6432/postgres?sslmode=disable
      DB_PATH_TO_MIGRATION: file://internal/repo/pg/migration
      DB_APPLICATION_SCHEMA: public
      SERVER_TOKEN_JWT_KEY: kg#n5Q2SP7A4/T.v
      SERVER_TOKEN_LIFE_TIME: 3h
      APP_SHUTDOWN_TIMEOUT: 30s
      SERVER_JWT_KEY: kg#n5Q2SP7A4/T.v
      SERVER_ADDR: :13693
      SERVER_LOG_QUERYS: "false"
      SERVICE_NOTIFICATION_PERIOD: 5m
    depends_on:
      odyssey:
        condition: service_healthy
      promtail-monolith: 
        condition: service_started
    labels:
      logging: "promtail"
    sysctls:
      - net.ipv4.ip_local_port_range=1024 65535
      - net.ipv4.tcp_tw_reuse=1

  postgres:
    image: postgres
    command: 
    - -p 5434
    - -c 
    - hba_file=/var/lib/postgresql/data/pg_hba.conf
    - -c 
    - password_encryption=md5
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1789
      POSTGRES_DB: postgres
      PGDATA: /var/lib/postgresql/data/monolith/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5434"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 5434:5434
    volumes:
      - postgres-monolith-db:/var/lib/postgresql/data
      - ./postgres-config/pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
      - ./postgres-config/postgresql.conf:/var/lib/postgresql/data/monolith/postgresql.conf
    networks:
      - nats-m
    deploy:
      resources:
        limits:
          cpus: '1'

  postgres-exporter:
    command: '--no-collector.stat_bgwriter'
    image: quay.io/prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_URI: "postgres:5434/postgres?sslmode=disable"
      DATA_SOURCE_USER: postgres
      DATA_SOURCE_PASS: 1789
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    volumes:
      - ./queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    ports:
      - "9187:9187"
    networks:
      - nats-m
    depends_on:
      - postgres

  loki-monolith:
    image: grafana/loki:latest
    container_name: loki-monolith
    ports:
      - "3100:3100"
      - "9093:9093"
    command:
      - "-config.expand-env"
      - "-config.file=/etc/loki/config.yaml"
    environment:
      - LOKI_PORT=3100
    volumes:
      - ./loki:/etc/loki

  promtail-monolith:
    image: grafana/promtail:latest
    container_name: promtail-monolith
    ports:
      - "9080:9080"
    volumes:
      - ./promtail:/etc/promtail
      - /var/log:/var/promtail
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers
    command:
      - "-config.file=/etc/promtail/promtail-config.yml"
    depends_on:
      loki-monolith: 
        condition: service_started
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080

volumes:
  postgres-monolith-db:

networks:
  nats-m:
    name: nats-m